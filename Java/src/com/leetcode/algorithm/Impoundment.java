 package com.leetcode.algorithm;

import java.util.Arrays;

/**
 * @author MysteryGuest
 * @date 2021/04/26
 * 蓄水
 * 给定 N 个无限容量且初始均空的水缸，每个水缸配有一个水桶用来打水，第 i 个水缸配备的水桶容量记作 bucket[i]。小扣有以下两种操作：
 * 升级水桶：选择任意一个水桶，使其容量增加为 bucket[i]+1
 * 蓄水：将全部水桶接满水，倒入各自对应的水缸
 * 每个水缸对应最低蓄水量记作 vat[i]，返回小扣至少需要多少次操作可以完成所有水缸蓄水要求。
 * 注意：实际蓄水量 达到或超过 最低蓄水量，即完成蓄水要求。
 */
public class Impoundment {
    
    /*
     * 提示：
     * 1 <= bucket.length == vat.length <= 100
     * 0 <= bucket[i], vat[i] <= 10^4
     * */
    public int storeWaterOut(int[] bucket, int[] vat) {
        // 第一步，找出最小的水桶进行升级
//        int min = Arrays.stream(bucket).min().getAsInt(); 不是要找出最小的值，而是最小值对应的下标，是要++的
        int min_index=0;
        // 为了最优化，对于水缸容积为0的情况，升级对应的水桶没有意义，所以升级的水桶必须是对应水缸非空的最小水桶
        for (int i = 0; i < vat.length; i++) {
            if (vat[i]!=0) {
                // 初始化
                min_index=i;
            }
        }
        
        for (int i = 0; i < bucket.length; i++) {
            if (bucket[min_index]>bucket[i]&&vat[i]!=0) {
                min_index=i;
            }
        }
//        System.err.println(min_index);
        bucket[min_index]++;
//        System.err.println(bucket[min_index]);
        
        // 第二步，对应水缸里加水需要几步
        int max_step=0, current_step=0, index=0; // index负责记住是哪对水桶和水缸
        float result;
        for (int i = 0; i < vat.length; i++) {
            // 自动类型提升
            /*
             * (float)vat[i]%(float)bucket[i]/10f是为了解决整除精确度问题，91/10=9.0，而91f/10f=9.1
             * */
//            result = vat[i]/bucket[i] + (float)vat[i]%(float)bucket[i]/10f;
            result = (float)vat[i]/(float)bucket[i];
            current_step = (int)Math.ceil(result);
            if (current_step>max_step) {
                max_step=current_step;
                index=i;
            }
        }
        // 针对未通过用例
        if (max_step==0) {
            return 0;
        }
//        System.out.println("max_step: "+max_step);
        int min_step=max_step;
//        System.out.println("index: "+index);
//        System.out.println("bucket[index]: "+bucket[index]);
        for (int i = 0; i < max_step; i++) {
//            // 选择第一个操作，再做水桶++
//            bucket[index]++;
            result = vat[index]/bucket[index];
            current_step = (int)Math.ceil(result)+i+1;
//            System.out.println(vat[index]+"/"+bucket[index]+"="+current_step);
            min_step = Math.min(min_step, current_step);
            bucket[index]++;
        }
        
        return min_step+1;
    }
    
    public int storeWater(int[] bucket, int[] vat) {

        // 在两个操作之间权衡，寻求最优解
        
        // 水缸容积全为0，水桶全为0没事，可以执行第一步的操作
        if (Arrays.stream(vat).max().getAsInt()==0) {
            return 0;
        }
        
        int arr_min_step[] = new int[vat.length];
        // 每个都遍历一遍？
        int min_step, current_step, first_op=0;
        float result;
        for (int i = 0; i < vat.length; i++) {
            
            result = (float)vat[i]/(float)bucket[i];
            if (vat[i]==3230) {
                System.out.println(vat[i]+"/"+bucket[i]+"=\t"+result);
            }
//            System.out.println(vat[i]+"/"+bucket[i]+"="+result);
            // 先选择操作2，并将此时的步数视为最少
            min_step = (int)Math.ceil(result);
            while (result>1) {
                bucket[i]++;
                first_op++; // 选择了第一次操作的次数
                result = (float)vat[i]/(float)bucket[i];
                
//                System.err.println(vat[i]+"/"+bucket[i]+"="+result);
                current_step = (int)Math.ceil(result)+first_op;
                if (vat[i]==8299&&first_op<100) {
                    System.out.println(vat[i]+"/"+bucket[i]+"="+result+" current_step: "+current_step+" first_op: "+first_op);
                }
                // 再选择第1步
                min_step = Math.min(min_step, current_step);
            }
//            first_op=0; // 对于其他水缸和水桶对，应置0
            arr_min_step[i]=min_step;
        }
        
        for (int i : arr_min_step) {
            System.out.print(i+"  ");
        }
        System.out.println();
        return Arrays.stream(arr_min_step).max().getAsInt();
    }
    
    // 最后一个用例实在不知道问题在哪，从leetcode上找的题解
    public int storeWaterOnline(int[] bucket, int[] vat) {
        int max = 0;
        for(int v:vat)
            if(max < v) max = v;
        if(max == 0) return 0;
        int n = bucket.length;
        int ans = Integer.MAX_VALUE;
        for(int i = 1; i <= 10000; i++) {//遍历倒水次数
            int per = 0;
            int cur = i;//倒水i次，所以操作次数+i
            for(int j = 0; j < n; j++) {//遍历每个水缸
                per = (vat[j] + i - 1) / i;// 水槽容量/倒水次数=每次倒水量
                //+（i - 1）目的是为了向上取整(除完后如果有余数，加上i-1之后就一定会多商1，从而达到向上取整的功能)
                //使用vat[j]%i==0 ? vat[j]/i : vat[j]/i+1 代替也行，但是更慢
                cur += Math.max(0, per - bucket[j]);// 每次倒水量-初始水量=需要升级次数
            }
            ans = Math.min(ans, cur);//所有倒水次数中，取最小的操作次数
        }
        return ans;
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        /*
         * 输入：bucket = [1,3], vat = [6,8]
         * 输出：4
         * 解释：
         * 第 1 次操作升级 bucket[0]；
         * 第 2 ~ 4 次操作均选择蓄水，即可完成蓄水要求。
         * */
        Impoundment impoundment = new Impoundment();
        
//        int []bucket = {1,3};
//        int[] vat = {6,8};
//        System.out.println(impoundment.storeWater(bucket, vat));
//        
//        /*
//         * 输入：bucket = [9,0,1], vat = [0,2,2]
//         * 输出：3
//         * 解释：
//         * 第 1 次操作均选择升级 bucket[1]
//         * 第 2~3 次操作选择蓄水，即可完成蓄水要求。
//         * */
//        int []bucket1 = {9, 0, 1};
//        int[] vat1 = {0,2,2};
//        System.out.println(impoundment.storeWater(bucket1, vat1));
//        
//        /*
//         * 未通过用例：
//         * 输入：bucket = [3,2,5], vat = [0, 0 ,0]
//         * 输出：1
//         * 预期结果：0
//         * */
//        int []bucket2 = {3, 2, 5};
//        int[] vat2 = {0,0,0};
//        System.out.println(impoundment.storeWater(bucket2, vat2));
//        
//        /*
//         * 未通过用例：
//         * 输入：bucket = [3,2,5], vat = [0, 0 ,120]
//         * 输出：25
//         * 预期结果：17
//         * */
//        int []bucket3 = {3, 2, 5};
//        int[] vat3 = {0,0,120};
//        System.out.println(impoundment.storeWater(bucket3, vat3));
//        
//        /*
//         * 未通过用例：
//         * 输入：bucket = [16,29,42,70,42,9], vat = [89,44,50,90,94,91]
//         * 输出：10
//         * 预期结果：11
//         * */
//        int []bucket4 = {16,29,42,70,42,9};
//        int[] vat4 = {89,44,50,90,94,91};
//        System.out.println(impoundment.storeWater(bucket4, vat4));
//        
//        /*
//         * 未通过用例：
//         * 输入：bucket = [63,85], vat = [85,96]
//         * 输出：3
//         * 预期结果：2
//         * 整个方法都要改，也许不用第一步操作就可以完事
//         * */
//        int []bucket5 = {63,85};
//        int[] vat5 = {85,96};
//        System.out.println(impoundment.storeWater(bucket5, vat5));
//        
//        int []bucket6 = {0};
//        int[] vat6 = {1};
//        System.out.println(impoundment.storeWater(bucket6, vat6));
//        
//        /*
//         * 未通过用例：
//         * 输入：bucket = [3710,6067,2993,70,2340,2748,9385,3027,3456,5246,9739,1220,9539,9074,4729,7051,8462,6908,3649,
//         *                9996,8890,2980,4350,7350,6344,6759,4420,269,9341,648,7737,8133,3717,2766,5807,4338,2077,5775,
//         *                4905,7262,1258,613,3837,3475,437,3739,9814,4790,2075,7722,3290,5685,3499,6992,4421,934,6004,
//         *                5763,3463,6138,8818,445,4778,4979,126,3969,2994,87,3739,8582,9559,8326,9132,257,8928,9147,1615,
//         *                4665,9828,3925,6435,5326,836,519,298,600,5503,273,9580,5383,8966,4810,1386,7207,8060,678,8837,
//         *                6946,1210,945], 
//         *      vat = [6304,6509,4276,9645,6455,8167,9667,4385,8872,7889,9936,4413,9922,9894,8065,7627,9225,9907,7055,9996,
//         *             9439,3351,9317,8363,9383,6850,4621,5389,9508,3391,9650,8363,8719,5594,8770,5403,7107,9941,9254,9355,
//         *             4614,4640,4896,8759,4397,8441,9870,9906,2396,8092,6939,9432,8182,9090,8029,4930,7772,7066,7279,7778,
//         *             9529,2947,6552,6930,5260,8470,8478,1371,9453,9767,9888,9964,9960,3990,9391,9377,3063,5374,9880,7684,
//         *             7864,7078,2622,3754,617,9773,9415,8026,9883,5735,9233,6715,9105,7932,9178,1081,9340,7284,6621,1965]
//         * 输出：138
//         * 预期结果：127
//         * */
//        int []bucket7 = {3710,6067,2993,70,2340,2748,9385,3027,3456,5246,9739,1220,9539,9074,4729,7051,8462,6908,3649,
//                          9996,8890,2980,4350,7350,6344,6759,4420,269,9341,648,7737,8133,3717,2766,5807,4338,2077,5775,
//                          4905,7262,1258,613,3837,3475,437,3739,9814,4790,2075,7722,3290,5685,3499,6992,4421,934,6004,
//                          5763,3463,6138,8818,445,4778,4979,126,3969,2994,87,3739,8582,9559,8326,9132,257,8928,9147,1615,
//                          4665,9828,3925,6435,5326,836,519,298,600,5503,273,9580,5383,8966,4810,1386,7207,8060,678,8837,
//                          6946,1210,945};
//        int[] vat7 = {6304,6509,4276,9645,6455,8167,9667,4385,8872,7889,9936,4413,9922,9894,8065,7627,9225,9907,7055,9996,
//            9439,3351,9317,8363,9383,6850,4621,5389,9508,3391,9650,8363,8719,5594,8770,5403,7107,9941,9254,9355,
//            4614,4640,4896,8759,4397,8441,9870,9906,2396,8092,6939,9432,8182,9090,8029,4930,7772,7066,7279,7778,
//            9529,2947,6552,6930,5260,8470,8478,1371,9453,9767,9888,9964,9960,3990,9391,9377,3063,5374,9880,7684,
//            7864,7078,2622,3754,617,9773,9415,8026,9883,5735,9233,6715,9105,7932,9178,1081,9340,7284,6621,1965};
//        System.out.println(impoundment.storeWater(bucket7, vat7));
         
        /*
         * 未通过用例：
         * 输入：bucket = [9988,5017,5130,2445,9896,9151,3625,7801,608,3283,1386,979,5209,4182,8234,9870,8714,6435,3800,
         *                956,4006,5620,7474,1205,6993,3320,1201,7593,905,3816,4522,4560,8027,8219,6686,3779,2141,1240,
         *                6504,6612,6921,7329,8145,5745,7652,4340,7933,6246,5157,9447,107,9665,3653,2978,9832,4945,4312,
         *                2199,449,8432,3230,8163,800,6547,1110,1194,9384,632,3275,1229,7230,8643,7613,8256,5043,1288,
         *                3088,8997,4554,4755,7433,8146,9722,3469,8863,5831,7816,5058,4316,7946,8402,975,2450,4958,9811,
         *                9336,21,9309,8999,56],
         *      vat = [9991,6973,7192,9876,9910,9549,3700,8814,1308,9981,9234,7292,7732,8458,8441,9939,9621,7285,7452,
         *             2718,6589,7555,8788,3202,7832,4781,8798,9299,2112,9963,8755,7240,9217,8587,6782,9703,8954,3759,
         *             6907,7218,7333,8020,8323,5750,9510,8571,8664,8510,9363,9741,8643,9825,4227,8530,9961,8511,8949,
         *             7486,9086,9690,5316,9581,9314,8817,7234,8998,9485,5394,7365,1501,7984,9802,9778,8314,7482,7117,
         *             5117,9609,8732,9728,9330,8800,9775,6210,8966,7700,8802,7607,8950,9730,9855,1231,5228,5329,9982,
         *             9532,3230,9951,9034,8299]
         * 输出：127
         * 预期结果：138
         * */
        int bucket8[] = {9988,5017,5130,2445,9896,9151,3625,7801,608,3283,1386,979,5209,4182,8234,9870,8714,6435,3800,
            956,4006,5620,7474,1205,6993,3320,1201,7593,905,3816,4522,4560,8027,8219,6686,3779,2141,1240,6504,6612,6921,
            7329,8145,5745,7652,4340,7933,6246,5157,9447,107,9665,3653,2978,9832,4945,4312,2199,449,8432,3230,8163,800,
            6547,1110,1194,9384,632,3275,1229,7230,8643,7613,8256,5043,1288,3088,8997,4554,4755,7433,8146,9722,3469,8863,
            5831,7816,5058,4316,7946,8402,975,2450,4958,9811,9336,21,9309,8999,56};
        int vat8[] = {9991,6973,7192,9876,9910,9549,3700,8814,1308,9981,9234,7292,7732,8458,8441,9939,9621,7285,7452,
            2718,6589,7555,8788,3202,7832,4781,8798,9299,2112,9963,8755,7240,9217,8587,6782,9703,8954,3759,6907,7218,
            7333,8020,8323,5750,9510,8571,8664,8510,9363,9741,8643,9825,4227,8530,9961,8511,8949,7486,9086,9690,5316,
            9581,9314,8817,7234,8998,9485,5394,7365,1501,7984,9802,9778,8314,7482,7117,5117,9609,8732,9728,9330,8800,
            9775,6210,8966,7700,8802,7607,8950,9730,9855,1231,5228,5329,9982,9532,3230,9951,9034,8299};
        System.out.println(impoundment.storeWater(bucket8, vat8));
//        System.out.println(impoundment.storeWaterOnline(bucket8, vat8));
    }

}
